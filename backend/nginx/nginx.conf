#
#              fastcgi_hide_header X-Powered-By;
#              add_header X-Content-Type-Options nosniff;
#              add_header X-XSS-Protection "1; mode=block";
#              add_header Set-Cookie "Path=/; HttpOnly; Secure";
#              add_header Cache-Control 'no-store, no-cache';
#              # config to enable HSTS(HTTP Strict Transport Security)
#              add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#
#              # header and cache expiration
#              expires epoch;
# error_log /var/log/nginx/error.log;

#         location ~ /api/projects/(.*) {
#             content_by_lua_block {
#                 local http = require "resty.http"
#                 local cjson = require "cjson"
#                 local userHost = os.getenv("USER_URL")
#                 local projectHost = os.getenv("PROJECT_URL")
#
#                 local project_id = ngx.var.uri:match("/api/projects/(.*)")
#
#                 local httpc = http.new()
#                 local res_user, err = httpc:request_uri(userHost .. "/v1/api/projects/" .. project_id, {
#                     method = "GET",
#                     headers = {
#                         ["Content-Type"] = "application/json",
#                         ["Authorization"] = ngx.req.get_headers()["Authorization"],
#                     },
#                 })
#
#                 if not res_user then
#                     ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
#                     ngx.say(cjson.encode({ state = false, message = "User request failed: " .. (err or "unknown") }))
#                     return
#                 end
#
#                 local user_data = cjson.decode(res_user.body)
#
#                 if user_data.isMatch then
#                     local res_project, err = httpc:request_uri(projectHost .. "/v1/api/project/" .. project_id, {
#                         method = "GET",
#                         headers = {
#                             ["Content-Type"] = "application/json",
#                             ["Authorization"] = ngx.req.get_headers()["Authorization"],
#                         },
#                     })
#
#                     if not res_project then
#                         ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
#                         ngx.say(cjson.encode({ state = false, message = "Project request failed: " .. (err or "unknown") }))
#                         return
#                     end
#
#                     local project_data = cjson.decode(res_project.body)
#
#                     local combined_data = {
#                         state = project_data.state,
#                         id = user_data.data[1].id,
#                         project_name = user_data.data[1].project_name,
#                         projectImageUrl = user_data.data[1].projectImageUrl,
#                         updated_at = user_data.data[1].updated_at,
#                         created_at = user_data.data[1].created_at,
#                         user = user_data.data[1].user,
#                         data = project_data.data,
#                     }
#
#                     ngx.status = ngx.HTTP_OK
#                     ngx.say(cjson.encode(combined_data))
#                 else
#                     -- Прокси запрос к userHost, если isMatch не совпадает
#                     local proxy_pass_url = userHost .. "/v1/api/projects/" .. project_id
#                     local res, err = httpc:request_uri(proxy_pass_url, {
#                         method = ngx.req.get_method(),
#                         headers = ngx.req.get_headers(),
#                         body = ngx.req.get_body_data(),
#                     })
#
#                     if not res then
#                         ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
#                         ngx.say(cjson.encode({ state = false, message = "Proxy request failed: " .. (err or "unknown") }))
#                         return
#                     end
#
#                     ngx.status = res.status
#                     for k, v in pairs(res.headers) do
#                         ngx.header[k] = v
#                     end
#                     ngx.say(res.body)
#                 end
#             }
#         }

# error_log /var/log/nginx/error.log;

#     lua_shared_dict my_cache 10m;

#     init_by_lua_block {
#         local http = require "resty.http"
#     }

worker_processes 1;
events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/json;
    sendfile        on;
    keepalive_timeout  65;

    set_real_ip_from 0.0.0.0/0;
    real_ip_recursive on;
    real_ip_header X-Forwarded-For;
    limit_req_zone $binary_remote_addr zone=one:10m rate=20r/m;

    map $http_origin $allowed_origin {
        "~*(^https?://localhost:3000$)"       $http_origin;
        "~*(^https?://172\.27\.96\.1:3000$)"   $http_origin;
        "~*(^https?://192\.168\.1\.3:3000$)"   $http_origin;
        default "";
    }

    upstream projectserver {
        server design_rendering:3003;
    }

    upstream userserver {
        server user:3004;
    }

    upstream authenticationserver {
        server authentication:3002;
    }

    server {
        listen       443 ssl;
        server_name  localhost;

        ssl_certificate /certificates/localhost.pem;
        ssl_certificate_key /certificates/localhost-key.pem;

        ssl_session_cache    shared:SSL:10m;
        ssl_session_timeout  10m;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        location / {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            if ($allowed_origin) {
                add_header 'Access-Control-Allow-Origin' $allowed_origin;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Allow-Credentials' 'true';
            }

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_pass_request_headers on;
        }

        limit_req zone=one burst=20 nodelay;

#         --projects

        location /api/projects/create {
            proxy_pass http://userserver/v1/api/projects/create;
        }

        location ~ /api/project_datail/(.*) {
            set $project_id $1;
            proxy_pass http://userserver/v1/api/projects/$project_id;
        }

        location ~ /api/project/(.*) {
            set $project_id $1;
            proxy_pass http://projectserver/v1/api/project/$project_id;
        }

        location ~ /api/projects/(.*)/all {
            set $user_id $1;
            proxy_pass http://userserver/v1/api/projects/getAllProjects/$user_id;
        }

        location ~ /api/projects/(.*)/save {
            set $project_id $1;
            proxy_pass http://projectserver/v1/api/project/$project_id/save;
        }

        location ~ /api/projects/(.*)/update {
            set $project_id $1;
            proxy_pass http://userserver/v1/api/projects/$project_id/update;
        }

#         --auth

        location /api/auth/register {
            proxy_pass http://authenticationserver/v1/api/auth/register;
        }

        location /api/auth/login {
            proxy_pass http://authenticationserver/v1/api/auth/login;
        }

        location /api/auth/login-confirm {
            proxy_pass http://authenticationserver/v1/api/auth/login-confirm;
        }

        location /api/auth/logout {
            proxy_pass http://authenticationserver/v1/api/auth/logout;
        }

        location /api/auth/password-reset {
            proxy_pass http://authenticationserver/v1/api/auth/password-reset;
        }

        location ~ /api/auth/password-reset/(.*) {
            set $resetPasswordCode $1;
            proxy_pass http://authenticationserver/v1/api/auth/password-reset/$resetPasswordCode;
        }

#         --users

        location ~ /api/users/(.*) {
            set $user_id $1;
            proxy_pass http://userserver/v1/api/users/$user_id;
        }

        location /api/users/update {
            proxy_pass http://userserver/v1/api/users/update;
        }

        location /api/users/avatarUpload {
            client_max_body_size 3M;
            proxy_pass http://userserver/v1/api/users/avatar;
        }
    }
}
